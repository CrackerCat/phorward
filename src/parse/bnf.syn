/* -GRAMMAR---------------------------------------------------------------------
Phorward Foundation Toolkit
Copyright (C) 2006-2015 by Phorward Software Technologies, Jan Max Meyer
http://www.phorward-software.com ++ contact<at>phorward<dash>software<dot>com
All rights reserved. See LICENSE for more information.

File:	bnf.syn
Usage:	Grammar for grammar definition language ;)
----------------------------------------------------------------------------- */

// Whitespace ------------------------------------------------------------------

$				/[ \t\r\n]+/										%ignore;
$				/\/\/[^\n]*\n/										%ignore;
$				/\/\*([^*]|\*[^\/])*\*\//							%ignore;

// Terminals -------------------------------------------------------------------

$ccl 			/'[^']*'/ 											%emit 1;
$string 		/"[^"]*"/											%emit 2;
$regex 			/\/(\\.|[^\\\/])*\//								%emit 3;

$ident			/[A-Za-z_][A-Za-z0-9_]*/ 							%emit 10;
$int			/[0-9]+/ 											%emit 11;
$float			/[0-9]+\.[0-9]*|[0-9]*\.[0-9]+/ 					%emit 12;

$function		/[A-Za-z_][A-Za-z0-9_]*\(\)/ 						%emit 4;

// Nonterminals ----------------------------------------------------------------

inline			: '(' alternation ')'								%emit 32
				;

symbol 																%emit 20
				: ident
				| ccl
				| string
				| regex
				| function
				| inline
				;

modifier		: symbol '*' 										%emit 25
				| symbol '+' 										%emit 26
				| symbol '?'										%emit 27
				| symbol ;

do_cmd			: ident												%emit 50
				;

do_param															%emit 51
				: string | ident | int | float
				;

do_param_list	: do_param_list ',' do_param
				| do_param
				;

do_params		: '(' do_param_list? ')'
				;

sequence		: sequence modifier | modifier ;

production	 	: sequence | ;

do				: "before" do_cmd do_params?						%emit 60
				| "within" do_cmd do_params?						%emit 61
				| "behind"? do_cmd do_params?						%emit 62
				;

emit			: "emit" ( int | string )?							%emit 42
				;

flag			: "noemit"											%emit 40
				| emit
				| do
				;

flags    		: flags '%' flag+
				| '%' flag+
				;

alternative		: production flags?									%emit 30;
alternation		: alternation '|' alternative | alternative ;

nontermflag		: "noemit"											%emit 40
				| "goal"											%emit 40
				| "lexeme" 											%emit 40
				| emit
				| do
				;

nontermflags	: nontermflags '%' nontermflag+
				| '%' nontermflag+
				;

nontermdef		: ident nontermflags? ( ':' alternation )? ';'		%emit 31;

termflag		: "noemit" 											%emit 40
				| "ignore" 											%emit 40
				| "skip" 											%emit 40
				| emit
				| do
				;

termflags		: termflags '%' termflag+
				| '%' termflag+
				;

termdef			: '$' ident? ( ccl | string | regex | function )
						termflags? ';'								%emit 35
				;

gflag       														%emit 41
				: "emitall"
				| "emitnone"
				| "lrec"
				| "rrec"
				;

gflags			: gflags '%' gflag+ | '%' gflag+ ;

definition		: nontermdef | termdef | gflags ;

grammar																%goal
				: definition+ ;

