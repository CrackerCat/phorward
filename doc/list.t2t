=== Overview ===

Next to the **parray** object, the **plist** object is a powerful C implementation of a double-linked list with some extra features. It is also used for handling homogenious elements of the same size in a dynamic way, and can be used for many tasks.

**plist** can be seen as a superset of the **parray** object, because it features nearly the same operations but with other underlying data management methods.

The **plist** object implements:

- a double linked-list
- hashable entries (hash table, including same element key stacking)
- dynamic stack functionalities
- data object collections
- set functions
-

**plist** can be used as a generic data structure for

- hash tables
- queues
- arrays
- stacks
-

=== Construction and destruction ===

**plist** objects are created using @plist_create() or initialized with @plist_init(). The specific functions require the objects byte size that is required for every single element, and a flag configuration, that configures the **plist** object to a specified behavior.

Possible flags are listed below, and can be combined using bitwise or (|).

- **PLIST_MOD_NONE** no flags, this can also be just 0.
- **PLIST_MOD_PTR** to use the plist-object in pointer-mode: Each element cointains only a pointer to an object in the memory and returns this, instead of copying from or into pointers.
- **PLIST_MOD_RECYCLE** to configure that elements that are removed during list usage will be reused later, which reduces dynamic memory consumption.
- **PLIST_MOD_AUTOSORT** to automatically sort the list on insert operations.
- **PLIST_MOD_EXTKEYS** to configure that string pointers to hash-table key values are stored elsewhere, so the plist-module only uses the original pointers instead of copying them.
- **PLIST_MOD_PTRKEYS** disables string keys and uses the pointer/value provided as key directly.
- **PLIST_MOD_UNIQUE** to disallow hash-table-key collisions, so elements with a key that already exist in the object will be rejected.
- **PLIST_MOD_WCHAR** to let all key values handle as wide-character strings.
-

The mode **PLIST_MOD_PTR** is automatically set if the elements size is specified as 0.

A **plist** object must be freed using @plist_free() or cleared with @plist_clear().

```
plist* l;

l = plist_create( sizeof( usertype ), PLIST_MOD_RECYCLE );

/* Do something... */

plist_free( l );
```

=== Inserting elements ===

Elements can be inserted with

- @plist_insert() - insert element, optionally with key, at any desired position,
- @plist_push() - push element to end of list,
- @plist_shift() - shift element on begin of list,
- @plist_malloc() - zero-initialize new element at end of list, and
- @plist_rmalloc() - zero-initialize new element at begin of list.
-

```
plist* l;
usertype t;
usertype* tp;

/* Insert to position */
fill_usertype( &t );
plist_insert( l, plist_get( l, 2 ), (char*)NULL, &t );

/* Insert to end, with key value */
plist_insert( l, (plistel*)NULL, "hello", &t );

/* Insert and end and begin */
fill_usertype( &t );
plist_push( a, &t );
plist_shift( a, &t );

/* Retrieve fresh element memory at end and begin */
tp = (usertype*)plist_malloc( a );
fill_usertype( tp );
tp = (usertype*)plist_rmalloc( a );
fill_usertype( tp );
```

=== Accessing and iterating elements ===

Elements within a **plist** object are references by **plistel** items. To access the data element behind a **plistel** item, the function plist_access() is used, in combination with element retrival functions, like

- @plist_get() - get element by offset,
- @plist_rget() - get element by offset from the end,
- @plist_first() - get first element,
- @plist_last() - get last element,
- @plist_get_by_key() - retrieve element by key (in a hash table),
- @plist_get_by_ptr() - retrieve element by its data pointer.
-

```
plist* l;
plistel* e;
usertype* tp;
int i;

/* Get 5th data element */
tp = (usertype*)plist_access( plist_get( l, 5 ) );

/* Get data element with key "hello" */
tp = (usertype*)plist_access( plist_get_by_key( l, "hello" ) );

/* Iterate from begin to end */
for( e = plist_first( l ); e; e = plist_next( e ) )
	tp = (usertype*)plist_access( e );

/* Alternative: Using the plist_for()-macro */
plist_for( l, e )
	tp = (usertype*)plist_access( e );

/* Alternative: Using offset */
for( i = 0; ( tp = (usertype*)plist_access( plist_get( l, i ) ) ); i++ )
	;

/* Reversely iterate from end to begin */
for( e = plist_last( l ); e; e = plist_prev( e ) )
	tp = (usertype*)plist_access( e );

/* Reverse alternative: Using offset */
for( i = 0; ( tp = (usertype*)plist_access( plist_rget( l, i ) ) ); i++ )
	;
```

=== Removing elements ===

To remove elements from a **plist** object, the following functions can be used.

- @plist_remove() - remove any element,
- @plist_pop() - pop last element as from a stack,
- @plist_unshift() - remove first element as from a queue.
-

```
plist* l;
usertype t;

plist_remove( l, plist_get( l, 7 ) );
plist_pop( a, &t );
plist_unshift( a, &t );
```

=== Sorting elements ===

**plist** objects provide a sorting automatism, so that elements can be sorted on demand or on the fly at each element insertation.

The sorting order and rule is defined using an element comparison callback-function, which returns element lower, greater or equality like strcmp() does.
This function can be individually set using @plist_set_sortfn(), and defaultly points to a callback function that uses memcmp() as the element comparison function.

As prototype and example, the following comparison function:

```
int my_compare( plist* list, plistel* l, plistel* r )
{
	usertype*	tr;
	usertype*	tl;

	tl = (usertype*)plist_access( l );
	tr = (usertype*)plist_access( r );

	if( tl < tr )
		return -1;
	else if( tl > tr )
		return 1;

	return 0;
}
```

This can, than, be attached to the **plist** object with

``` plist_set_sortfn( l, my_compare );

To configure a **plist** object to be auto-sorted, the flag PLIST_MOD_AUTOSORT should be used at construction.
The sorting can be also be performed by invoking the functions

- @plist_sort() - to sort the entire list,
- @plist_subsort() - to sort only a part of the list (begin- and end-elements required).
-

=== Interchanging functions ===

**plist** objects also provide functions to handle data collections and sets, by providing functions that can deal with two objects of kind **plist**. Both lists must be configured with the same element memory size, else all functions will fail.

To implement these functions, every **plist** object also refers to a comparison-callback function. This is, by default, the same function as used for the sorting, and has also the same signature. This function can be implemented to check for element equality within set handling functions.

- @plist_diff() - checks two lists for same items (equality),
- @plist_union() - extends a list to all elements of a second list that are not equal to elements in the first list.
-

=== Additional functions ===

**plist** provides these additional functions:

- @plist_swap() - swaps the two elements within a list,
- @plist_dup() - duplicate list and its items,
- @plist_count() - return number of items in a list.
-

