


=== Overview ===

The **parray** object is a general-purpose data structure which can be used for several operations.

**parray** forms a data management container for handling homogeneous elements of the same size in a dynamic way. These elements can be atomic data types, pointers or structures. Elements are automatically allocated with a specified chunk-size, and can be appended or prepended to the given **parray** object.

The **parray** object brings the following advantages and disadvantages:

- __Advantages__
  - Chunk allocation requires less @pmalloc()/@prealloc() operations than with [plist #plist]
  - Dynamic and quick implementation for huge data structures
  - Elements are held in a real array on the heap
  - Low memory consumption
  - Fast iteration over elements
  -
- __Disadvantages__
  - Less flexible then [plist #plist]
  - No hashable entries
  - Removing elements or rechaining requires more computing power
  -
-

=== Construction and destruction ===

**parray** objects are created using @parray_create() or initialized with @parray_init(). The specific functions require the objects byte size that is required for every single element, and a chunk-size. Latter one can be omitted by specifing a chunk-size of 0, so that 128 elements per chunk will be the default. Objects can be cleared with @parray_erase(), respectively cleared and freed with @parray_free().

```
parray* a;

a = parray_create( sizeof( usertype ), 0 );

/* Do something... */

parray_free( a );
```

=== Inserting elements ===

Elements can be inserted with

- @parray_insert() - insert element at any desired offset,
- @parray_push() - push element to end of array,
- @parray_shift() - shift element on begin of array,
- @parray_malloc() - zero-initialize new element at end of array, and
- @parray_rmalloc() - zero-initialize new element at begin of array.
-

```
parray* a;
usertype t;
usertype* tp;

fill_usertype( &t );
parray_insert( a, 2, &t );

fill_usertype( &t );
parray_push( a, &t );
parray_shift( a, &t );

tp = (usertype*)parray_malloc( a );
fill_usertype( tp );
tp = (usertype*)parray_rmalloc( a );
fill_usertype( tp );
```

=== Accessing and iterating elements ===

Direct access to specific elements is done using

- @parray_get() - get element by offset from begin, and
- @parray_rget() - get element by offset from end.
- @parray_for() - Expands into a for-loop iterating over elements.
- @parray_iter() - Iterate over all elements and call a function on each element.
- @parray_riter() - Like @parray_iter(), but backwards.
-

Iterating over the elements:

```
parray* a;
usertype* tp;

/* Using a pointer ---------------------------------------------------------- */

for( tp = parray_first( a ); tp; tp = parray_next( a, tp ) )
	;

/* Shortcut */
parray_for( a, tp )
	;

/* Using a callback function ------------------------------------------------ */

void tp_callback( usertype* tp )
{
	/* ... */
}

parray_iter( a, (parrayfn)tp_callback ); /* Forwards... */
parray_riter( a, (parrayfn)tp_callback ); /* Backwards... */

/* Using a counter ---------------------------------------------------------- */
int i;

/* Iterate from first to last. */
for( i = 0; ( tp = (usertype*)parray_get( a, i ) ); i++ )
	;

/* Iterate from last to first. */
for( i = 0; ( tp = (usertype*)parray_rget( a, i ) ); i++ )
	;
```

Quick access to the first or last element is gained by @parray_last() and @parray_first().

To get a predecessor or successor of an element, use @parray_prev() respectively @parray_next().

Elements can be replaced by @parray_put() and @parray_rput() via their index.

=== Removing elements ===

Elements can be removed with

- @parray_remove() - remove element at any desired offset,
- @parray_pop() - remove last element like from a stack, and
- @parray_unshift() - remove first element.
-

```
parray* a;
usertype t;
usertype* tp;

parray_remove( a, 2, &t );
tp = (usertype*)parray_pop( a );
tp = (usertype*)parray_unshift( a );
```

=== Additional functions ===

Other, useful functions are

- @parray_count() - get number of elements within object,
- @parray_offset() - get offset of element by pointer,
- @parray_partof() - check if element is part of object,
- @parray_swap() - swap two elements within an object,
- @parray_reserve() - assume memory pre-allocation; This is interesting for stack operations.
-
