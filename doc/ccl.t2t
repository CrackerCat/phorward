The **pccl** object is established on top of the **plist** object and encapsulates easy-to-handle low-level functions for character-class handling.

These functions are heavily used by the library's regular expressions and parser implementations, but may also be helpful for other related projects. The **pccl** can handle character classes, by chaining ranges. It supports a fully-fledged set theory automatism, including construction of intersections, unions, range removal or appending. **pccl** objects are designed to work on huge alphabets with a low memory consumption. By default, characters are specified as wchar_t wide-character unicode values.

```
pccl* ccl;

/* Construct a character-class within a universe of the ASCII-alphabet (0-255):
	"-0123456789ABCDEFGHIJKLMNOQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz"
*/
ccl = p_ccl_create( 0, 255, "A-Za-z0-9_-" );

/* Invert character class */
p_ccl_negate( ccl );

/* Remove system chars */
p_ccl_delrange( ccl, 0, 31 );

/* Oh, and delete the "z" */
p_ccl_del( ccl, 'z' );

/* But add tab again! */
p_ccl_add( ccl, '\t' );

/* Enable all from 32 to 126  */
p_ccl_addrange( ccl, ' ', '~' );

/* Alternative way: */
p_ccl_parse( ccl, " -~", TRUE );

/* Test for characters */
printf( "A is in? %s\n", BOOLEAN_STR( p_ccl_test( ccl, 'A' ) );
printf( "a-z are in? %s\n", BOOLEAN_STR( p_ccl_testrange( ccl, 'a', 'z' ) );
printf( "\\n is in? %s\n", BOOLEAN_STR( p_ccl_test( ccl, '\n' ) );

/* Generate string */
printf( "My ccl is: %s\n", p_ccl_to_str( ccl, TRUE ) );

/* Drop it! */
p_ccl_free( ccl );
```

Useful, additional functions when working with **pccl** are:

- p_ccl_compare() - compary character-classes,
- p_ccl_diff() - create differencing character-class of two classes,
- p_ccl_erase() - clear character-class,
- p_ccl_get() - retrieve characters or ranges by offset,
- p_ccl_instest() - like p_ccl_test(), but with insensitve-character check,
- p_ccl_intersect() - create intersection character-class of two classes,
- p_ccl_print() - print character-class (for debug),
- p_ccl_parsechar() - parse an escaped character sequence into a wide-character,
- p_ccl_parseshorthand() - parse a typical shorthand (\d, \w) into a character-class.
-


