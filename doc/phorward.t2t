The Phorward Libraries
libphorward 0.24.0
Jul 2018

%!preproc(xhtml): '@([a-zA-Z0-9_]+)((\(\))?)' '[\1\2 #fn_\1]'
%!preproc(xhtml): '%NEED:(\d+)' "''' <!-- NEED \1 -->"
%!preproc(xhtml): '%FUNCTION:BEGIN' "''' <div class='function'>"
%!preproc(xhtml): '%FUNCTION:END' "''' </div>"
%!preproc(xhtml): '%DEFINITION:BEGIN' "''' <div class='definition'>"
%!preproc(xhtml): '%DEFINITION:END' "''' </div>"

%!postproc(xhtml): '\(C\)' '&copy;'
%!postproc(xhtml): '(<pre>)' '\1<code class="language-c">'
%!postproc(xhtml): '(</pre>)' '</code>\1'
%!postproc(xhtml): '(</head>)' '<link rel="stylesheet" type="text/css" href="prism.css" />\n<script src="prism.js"></script>\n\1'

%-------------------------------------------------------------------------------

= Table of Contents =

%%toc

= Introduction =

Welcome to the Phorward library on-line documentation!

**phorward** is a versatile C-library. It is split into several modules, and mostly focuses on the definition and implementation of parsers, recognizers, virtual machines and regular expressions.

The library is made up of several modules. These are:

- **any** provides a dynamical, extendible data structure and interface to store, convert and handle variables of different value types ("variant" data type),
- **base** provides tools for dynamic data structures and utility functions used throughout the library, including linked lists, hash-tables, stacks and arrays,
- **parse** defines tools to express grammars and provides a built-in LALR(1) parser generator and objects to handle abstract syntax trees, integrating perfectly with the tools from //regex// for lexical analysis,
- **regex** provides tools for lexical analysis and regular expression processing,
- **string** is an extended string processing library,
- **vm** can be used to implement and run stack-based virtual machines and instruction sets aimed to work with the *any* data type.
-

= Features =

//phorward// provides the following features:

- Parser development tools
  - Self-hosted Backus-Naur-Form (BNF) grammar definition language
  - //pparse// provides a modular LR(1) and LALR(1) parser generator
  - //ppast// is a representation of a browsable abstract syntax tree (AST)
- Lexer development tools
  - regular expressions and pattern definition interface
  - //plex// provides a lexical analyzer
  - //pregex// for definition and execution of regular expression
  - //pccl// for unicode-enabled character classes
  - tools for regex and lexer deployment
  - string functions for regular expression match, split and replace
- Runtime evaluation tools
  - construction of dynamic intermediate languages and interpreters
  - //pany// is a data object for handling different data-types in one object
  - //pvm// for defining stack-based virtual machine instruction sets
- Dynamic data structures
  - //plist// for linked-lists with built-in hash table support,
  - //parray// for arrays and stacks.
- Extended string management functions
  - concat, extend, tokenize and short-hand allocation of strings and wide-character strings
  - consistent byte- and wide-character (unicode) function support
  - unicode support for UTF-8 in byte-character functions
- Universal system-specific functions for platform-independent C software development
  - Unix-style command-line parser
  - Mapping files to strings
- Debug und trace facilities
- Consequent object-oriented build-up of all function interfaces (e.g. plist, parray, pregex, pparse, ...)
- Growing code-base of more and more powerful functions
-

Please check out https://phorward.info/ continuously to get the latest news, documentation, updates and support on the Phorward Toolkit.

= Installation =

== Building from sources ==

Building the Phorward library is simple as every GNU-style open source program. Extract the release tarball or clone the Git repository into a directory of your choice.

Then, run

``` $ ./configure

to configure the build-system and generate the Makefiles for your current platform. After successful configuration, run

``` $ make

and

``` $ make install

(properly as root), to install the toolkit into your system.

== Building on Windows ==

On Windows systems, the usage of [Cygwin #http://cygwin.org/] or another Unix shell environment is required. The Phorward Toolkit also perfectly cross-compiles on Linux using the MinGW and MinGW_x86-64 compilers.

To compile into 32-Bit Windows executables, configure with

``` $ ./configure --host=i486-mingw32 --prefix=/usr/i486-mingw32

To compile into 64-Bit Windows executables, configure with

``` $ ./configure --host=x86_64-w64-mingw32 --prefix=/usr/x86_64-w64-mingw32

== Local development build ==

Alternatively to the autotools build system used for installation, there is also a simpler method on setting up a local build system for development and testing purposes.

Once, type

``` $ make -f Makefile.gnu make_install

then, a simple run of

``` $ make

can be used to simply build the entire library or parts of it.

Note, that changes to the build system then must be done in the local Makefile, the local Makefile.gnu as well as the Makefile.am for the autotools-based build system.

= Intention behind this library =

The cornerstone for this library was laid in 2006 during some experimenting with several algorithms and their implementation. It rapidly turned out to become a general purpose library serving as the base toolchain for several, mostly unfinished software projects which had their origin at //J.M.K S.F. Software Technologies//, which was later renamed to //Phorward Software Technologies//.

The library was then released to the public in 2011, together with the open source parser generator [UniCC https://unicc.phorward-software.com/]. Since then, it was gradually extended to newer and more enhanced features, mostly on tools relating to parser and compiler construction, but also features already known from other projects and remastered in a more generic and powerful way.

The final destination of the Phorward library is not entirely clear yet. For now, it mostly serves as a kind of playground for different projections, but it is also used by the UniCC parser generator and the meanwhile discontinued RapidBATCH scripting language as its foundation library.

%-------------------------------------------------------------------------------

= Dynamic general-purpose objects =

== parray: Arrays and stacks ==[parray]

%!include: array.t2t

== plist: Linked lists, hash-tables, queues and stacks ==[plist]

%!include: list.t2t

== pccl: Character-classes ==[pccl]

%!include: ccl.t2t

%-------------------------------------------------------------------------------

= pregex, plex: Regular expression handling and lexical analyzers =

%!include: regex.t2t

%-------------------------------------------------------------------------------

= ppgram, ppar, ppast: Grammars, parsers and abstact-syntax trees =

%!include: parse.t2t

%-------------------------------------------------------------------------------

= Miscelleanous =

%!include: misc.t2t

%-------------------------------------------------------------------------------

= Reference =

%!include: ref.t2t

