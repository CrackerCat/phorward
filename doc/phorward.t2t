The Phorward Library
libphorward 0.24.0
Dec 2018

%!preproc(xhtml): '@([a-zA-Z0-9_]+)((\(\))?)' '[\1\2 #fn_\1]'
%!preproc(xhtml): '([ \t]|$)(pany|plist|plistel|parray|pccl|prange|pregex|pregex_ptn|plex)([-,.* \t])' '\1[\2 #\2]\3'
%!preproc(xhtml): '%NEED:(\d+)' "''' <!-- NEED \1 -->"
%!preproc(xhtml): '%FUNCTION:BEGIN' "''' <div class='function'>"
%!preproc(xhtml): '%FUNCTION:END' "''' </div>"
%!preproc(xhtml): '%DEFINITION:BEGIN' "''' <div class='definition'>"
%!preproc(xhtml): '%DEFINITION:END' "''' </div>"

%!postproc(xhtml): '[$]NEWPAGE[$]' '<div class="page-break"></div>'
%!postproc(xhtml): '\(C\)' '&copy;'
%!postproc(xhtml): '(<pre>)' '\1<code class="language-c">'
%!postproc(xhtml): '(</pre>)' '</code>\1'
%!postproc(xhtml): '(</head>)' '<link rel="stylesheet" type="text/css" href="prism.css" />\n<script src="prism.js"></script>\n\1'

%-------------------------------------------------------------------------------

= Table of Contents =

%%toc



%-------------------------------------------------------------------------------
= Introduction =

Welcome to the Phorward library on-line documentation!

**phorward** //(libphorward)// is a C/C++ programming library, providing useful extensions like dynamic data structures, enhanced string management functions and regular expressions.

The library provides several modules which can be used together or on their own:

- **any** provides an extensible data structure and interface to store, convert and handle variables of different value types (some kind of "variant" data type) within one data structure.
- **base** provides tools for dynamic data structures and utility functions used throughout the library, including linked lists, hash-tables, stacks and arrays.
- **regex** provides tools for constructing, parsing, processing and modifying regular expressions.
- **string** is an extended string processing library with useful functions for `char*` and `wchar_t*`-string manipulation.
-

The library also comes with some tools and command-line helpers, including a documentation generator and a functions prototype generator for C modules.



%-------------------------------------------------------------------------------

= Installation =

== Building from sources ==

Building the Phorward library is as simple as every GNU-style open source program. Extract the release tarball or clone the Git repository into a directory of your choice.

Then, run

``` $ ./configure

to configure the build-system and generate the Makefiles for your current platform. After successful configuration, run

``` $ make

and

``` $ make install

(properly as root), to install the toolkit into your system.

== Local development build ==

Alternatively, there is also a simpler method for setting up a local build system for development and testing purposes.

To do so, type

```
$ make -f Makefile.gnu make_install
$ make
```

This locally compiles the library or parts of it, and is ideal for development purposes.

== Building on Windows ==

On Windows systems, the usage of [Cygwin](https://cygwin.org/) or another Unix shell environment is required.

The Phorward Toolkit also perfectly cross-compiles on Linux using the MinGW and MinGW_x86-64 compilers.

```
# To compile into 32-Bit Windows executables, configure with
$ ./configure --host=i486-mingw32 --prefix=/usr/i486-mingw32

# To compile into 64-Bit Windows executables, configure with
$ ./configure --host=x86_64-w64-mingw32 --prefix=/usr/x86_64-w64-mingw32
```



%-------------------------------------------------------------------------------

= Intention behind this library =

The cornerstone for this library was laid in 2006 during some experimenting with several algorithms and their implementation. It rapidly turned out to become a general purpose library serving as the base toolchain for several, mostly unfinished software projects which had their origin at //J.M.K S.F. Software Technologies//, which was later renamed to //Phorward Software Technologies//.

The library was then released to the public in 2011, together with the open source parser generator [UniCC https://unicc.phorward-software.com/]. It was initially planned to use the library also for other C-based software projects having their origin at Phorward Software Technologies, but most of them where not continued.

Since 2018, the library is brought towards the official v1.0 release after some experiments had been started but now where separated and continued as stand-alone projects apart from //libphorward//.

%-------------------------------------------------------------------------------

= General functions & dynamic data structures  =

== Advanced memory management ==

The standard memory management functions can be replaced by these pendants:

- @pmalloc() - allocate and zero-intialize memory, stop on error.
- @prealloc() - reallocate memory, stop on error.
- @pfree() - free memory and return (void*)NULL pointer.
- @pmemdup() - shorthand for a malloc() with memcpy().
-

These functions are used throughout libphorward's internal object mapping functions.

== Boolean data type ==

libphorward makes heavy usage of the self-hosted data-type **pboolean**, which is also referenced by a define //BOOLEAN//, and the constants //TRUE// and //FALSE//.

It is known, that several header files and projects define these constants on their own, so that **pboolean**, the data-type, exists on its own using the p-prefix, but any of the defines are conditionally flagged with

```
#ifndef TRUE
#define TRUE					1
#endif
```

within ``phorward.h``.

== Debugging and tracing ==

Although this option is not widely used in modern C/C++ projects, libphorward offers an own debug and trace facility that can be turned on for modules to detect bugs or view the program trace.

For this, the library provides the following macros:

- @LOG() - message logging with printf-style formatting
- @MSG() - message logging (older style)
- @PROC() - starting macro marking a functions entry point,
- @PARMS() - log function parameters,
- @RETURN() - return a value
- @VARS() - log variables,
- @VOIDRET - return from a void function.
-

So when a function is written like this in libphorward's way:

```
int faculty( int x )
{
	int ret;

	PROC( "faculty" );
	PARMS( "x", "%d", x );

	if( x < 0 )
	{
		WRONGPARAM;
		RETURN( -1 );
	}
	else if( x == 0 )
	{
		MSG( "x is 0, so faculty is 1" );
		RETURN( 1 );
	}
	else
	{
		MSG( "Calling faculty recursively with:" );
		VARS( "x - 1", "%d", x - 1 );
		ret = x * faculty( x - 1 );
	}

	VARS( "ret", "%d", ret );
	RETURN( ret );
}
```

Trace is written to stderr, and will be compiled into the executable code if the DEBUG preprocessor-flag is defined with a value > 0.

Calling this function with

``` faculty( 3 );

yields in a debug log

```
(demo.c:  380) {
(demo.c:  380) .ENTRY : faculty
(demo.c:  381) .PARMS : x = >3<
(demo.c:  395) .MSG   : Calling faculty recursively with:
(demo.c:  396) .VARS  : x - 1 = >2<
(demo.c:  380) .{
(demo.c:  380) ..ENTRY : faculty
(demo.c:  381) ..PARMS : x = >2<
(demo.c:  395) ..MSG   : Calling faculty recursively with:
(demo.c:  396) ..VARS  : x - 1 = >1<
(demo.c:  380) ..{
(demo.c:  380) ...ENTRY : faculty
(demo.c:  381) ...PARMS : x = >1<
(demo.c:  395) ...MSG   : Calling faculty recursively with:
(demo.c:  396) ...VARS  : x - 1 = >0<
(demo.c:  380) ...{
(demo.c:  380) ....ENTRY : faculty
(demo.c:  381) ....PARMS : x = >0<
(demo.c:  390) ....MSG   : x is 0, so faculty is 1
(demo.c:  391) ....RETURN: faculty
(demo.c:  391) ...}
(demo.c:  400) ...VARS  : ret = >1<
(demo.c:  401) ...RETURN: faculty
(demo.c:  401) ..}
(demo.c:  400) ..VARS  : ret = >2<
(demo.c:  401) ..RETURN: faculty
(demo.c:  401) .}
(demo.c:  400) .VARS  : ret = >6<
(demo.c:  401) .RETURN: faculty
(demo.c:  401) }
```

when previously setting the environment variable ``TRACEMODULE="demo.c"`` or ``TRACEFUNCTION="faculty"``.

== System-related, platform-independent helpers ==

The Phorward library provides some useful functions for system-related but platform independent operations.

- @pbasename() returns the basename of a path (the last part),
- @pfiletostr() reads the content of an entire file into a dynamically allocated char*,
- @pfileexists() checks for file existence,
- @pgetopt() provides a simple to use, but effective GNU-style command-line argument parser,
- @pwhich() checks for a file using @pfileexists() in a PATH-like, delimited search path definition
-

$NEWPAGE$
== Dynamically managed arrays & stacks (parray)==[parray]

%!include: array.t2t

$NEWPAGE$
== Linked lists, hash-tables, queues & stacks (plist) ==[plist]

%!include: list.t2t

$NEWPAGE$
== Character-classes (pccl) ==[pccl]

%!include: ccl.t2t

%-------------------------------------------------------------------------------

= Variant data type (pany) =[pany]

coming soon

%-------------------------------------------------------------------------------

= Regular expressions & lexical analyzers (pregex, plex) =

%!include: regex.t2t

%-------------------------------------------------------------------------------

= String helper functions (pstr*, pwcs*) =

libphorward provides a set of functions for extended, dynamic string memory handling. These functions are named according to their standard C library counterparts with an added prefix ("p"), or introduce entirely new features.

String functions overview:

- @pstrcasecmp() - case-insensitive string comparison,
- @pstrcatchar() - append character to string with dynamic allocation,
- @pstrcatstr() - append string to string with dynamic allocation,
- @pstrdup() - duplicate string, also accepts NULL-pointers,
- @pstrget() - securely get string from a pointer,
- @pstrlen() - return length of string, also accepts NULL-pointers,
- @pstrltrim() - remove prefixing whitespace,
- @pstrlwr() - convert string to lower-case-order,
- @pstrncasecmp() - case-insensitive string comparison over maximum length,
- @pstrncatstr() - append string to string with dynamic allocation and maximum length,
- @pstrndup() - duplicate a string with maximum length,
- @pstrput() - securely set an allocated string into a pointer,
- @pstrrender() - dynamically render a string with placeholder substitution,
- @pstrreplace() - dynamically replace substrings within string,
- @pstrrtrim() - remove trailing whitespace,
- @pstrsplit() - dynamic tokenizer,
- @pstrtrim() - remove prefixing and trailing whitespace,
- @pstrupr() - convert string to lower-case-order.
-

Additionally, the following pendants for wide-character strings (wchar_t) exist and are available, when libphorward is compiled with the UNICODE flag enabled.

- @pwcscatchar() - append character to wide-character string with dynamic allocation,
- @pwcscatstr() - append wide-character string to wide-character string with dynamic allocation,
- @pwcsdup() - duplicate wide-character string, also accepts NULL-pointers,
- @pwcsget() - securely get wide-character string from a pointer,
- @pwcslen() - return length ot wide-character string, also accepts NULL-pointers,
- @pwcsncatstr() - append wide-character string to wide-character string with dynamic allocation and maximum length,
- @pwcsndup() - duplicate a wide-character string with maximum length,
- @pwcsput() - securely set an allocated wide-character string into a pointer.
-

Although the wide-character pendants to the standard extended string functions are not consistent right now, they may be extended in the future, when the existence of such functions is needed, or another, brave programmer is having the fun to implement them.


%-------------------------------------------------------------------------------

= Function reference =

%!include: ref.t2t

